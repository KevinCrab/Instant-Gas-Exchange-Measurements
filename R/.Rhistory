load("~/GitHub/Instant-Gas-Exchange-Measurements/data/AllValue.RData")
table = AllValue
type = "genotype"
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
if(type == "genotype"){
col = type
}
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
Cond_last
sd5 = tapply(table$Cond_last, table[,col] , se)
#define function to calculate standard error
se = function(x){
return(sd(x)/sqrt(length(x)))
}
sd5 = tapply(table$Cond_last, table[,col] , se)
sd5
sd5
PGMean = function(table,...){
UseMethod("PGMean",table, ...)
}
PGMean.GXvalue = function(table, type){
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
#define function to calculate standard error
se = function(x){
return(sd(x)/sqrt(length(x)))
}
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
#get rid of NA columns (if in the last GetValue function, only one of
#first or last minute values was chosen)
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
# assign class and attributes
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
PGMean(AllValue,"plot")
PGMean(AllValue,"plot")
PGMean = function(table, ...){
UseMethod("PGMean",table)
}
PGMean(AllValue,"plot")
data(AllValue)
data(AllValue.RData)
load("~/GitHub/Instant-Gas-Exchange-Measurements/man/AllCurve.Rd")
PGMean.GXvalue = function(table, type){
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
#define function to calculate standard error
se = function(x){
return(sd(x)/sqrt(length(x)))
}
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
#get rid of NA columns (if in the last GetValue function, only one of
#first or last minute values was chosen)
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
# assign class and attributes
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
