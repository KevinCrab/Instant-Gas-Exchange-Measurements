SE4 = c(SE4, sd(sub$Photo_last)/sqrt(length(sub$Photo_last)))
Cond_last = c(Cond_last, mean(sub$Cond_last))
SE5 = c(SE5, sd(sub$Cond_last)/sqrt(length(sub$Cond_last)))
Ci.Ca_last = c(Ci.Ca_last, mean(sub$Ci.Ca_last))
SE6 = c(SE6, sd(sub$Ci.Ca_last)/sqrt(length(sub$Ci.Ca_last)))
}
out = data.frame(name, leaf_replicate_number, Photo_first, SE1, Cond_first,
SE2, Ci.Ca_first, SE3, Photo_last, SE4, Cond_last, SE5,
Ci.Ca_last, SE6, stringsAsFactors = FALSE)
out = out[, colSums(is.na(out)) != nrow(out)]
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
PGMean.GXvalue(AllValue, "plot")
type = "plot"
table = AllValue
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
unique(table[,col]))
unique(table[,col])
namelist = unique(table[,col])
tapply(table$Photo_first, namelist, mean, na.rm = TRUE)
tapply(table$Photo_first, namelist[1] , mean, na.rm = TRUE)
table$Photo_first
tapply(table$Photo_first, table$name , mean, na.rm = TRUE)
tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
length(tapply(table$Photo_first, table$plot , mean, na.rm = TRUE))
unique(table$plot)
length(unique(table$plot))
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE))
str(Photo_first)
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE))
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
str(Photo_first)
tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
se = function(x){
return(sd(x)/sqrt(length(x)))
}
tapply(table$Photo_first, table$plot , se, na.rm = TRUE)
tapply(table$Photo_first, table$plot , se)
sd = tapply(table$Photo_first, table$plot , se))
sd = tapply(table$Photo_first, table$plot , se)
length(sd)
data.frame(Photo_first,sd)
names(AllValue)
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table$plot , se)
Cond_first = tapply(table$Cond_first, table$plot , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table$plot , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table$plot , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table$plot , se)
Photo_last = tapply(table$Photo_last, table$plot , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table$plot , se)
Cond_last = tapply(table$Cond_last, table$plot , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table$plot , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table$plot , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table$plot , se)
data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
View(out)
real = PGMean.GXvalue(AllValue)
real = PGMean.GXvalue(AllValue,"plot")
View(real)
real = sort(real)
real = sort(real,name)
real = sort(real,real$name)
real = real[order(real$name),]
rownames(out)
out$names = rownames(out)
View(AllValue)
table(plot_name)
table(AllValue$plot_name)
length(table(AllValue$plot_name))
out$name = rownames(out)
out$rep_number = table(AllValue$plot_name)
out = out[, colSums(is.na(out)) != nrow(out)]
out$rep_number = table(AllValue$plot_name)
out = out[, colSums(is.na(out)) != nrow(out)]
names(out)
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table$plot , se)
Cond_first = tapply(table$Cond_first, table$plot , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table$plot , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table$plot , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table$plot , se)
Photo_last = tapply(table$Photo_last, table$plot , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table$plot , se)
Cond_last = tapply(table$Cond_last, table$plot , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table$plot , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table$plot , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table$plot , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue$plot_name)
out = out[, colSums(is.na(out)) != nrow(out)]
names(out)
out = out[,c(13,14,1:12)]
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
Photo_first
table(AllValue[,col])
type = "genotype"
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
PGMean.GXvalue = function(table, type){
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
#define function to calculate standard error
se = function(x){
return(sd(x)/sqrt(length(x)))
}
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
# assign class and attributes
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
PGMean(AllValue, "plot")
PGMean = function(table,...){
UseMethod("PGMean",table)
}
PGMean(AllValue, "plot")
library(IGEA)
library(IGEA)
class(AllCurve)
head(AllCurve)
head(leak1_718)
head(AllValue)
filename = "cm_07-21-2017_ril_leak1_.csv"
genolist = "genotypic_imformation.csv"
table = read.csv(filename,header = FALSE,stringsAsFactors = FALSE,na.strings = c("","NA"))
setwd("~/GitHub/Instant-Gas-Exchange-Measurements/inst/extdata")
table = read.csv(filename,header = FALSE,stringsAsFactors = FALSE,na.strings = c("","NA"))
#check input
if(!is.data.frame(table)) stop("Data frame needed.")
if(!is.numeric(leaf_rep)) stop("leaf replication number must be numeric\nstart from 1")
#record measurement properties
measurement.time = table[2,1]
machine = table[which(table$V1=="Unit="),2]
lightsource = table[which(table$V1=="LightSource="),2]
AD.avgtime = table[which(table$V1=="A/D AvgTime="),2]
flow = table[grep("Flow: Fixed ",table[,2]),2]
flow = unique(gsub("(\\d{2}:\\d{2}:\\d{2})","",flow))
flow = gsub("\"\n" ,"",flow)
flow = gsub("\" ","",flow)
par = table[grep("Lamp: ParIn",table[,2]),2]
par = unique(gsub("(\\d{2}:\\d{2}:\\d{2})","",par))
par = gsub("\"\n" ,"",par)
par = gsub("\" ","",par)
CO2 = table[grep("CO2 Mixer",table[,2]),2]
CO2 = unique(gsub("(\\d{2}:\\d{2}:\\d{2})","",CO2))
CO2 = gsub("\"\n" ,"",CO2)
CO2 = gsub("\" ","",CO2)
Tblock = table[grep("Coolers: Tblock",table[,2]),2]
Tblock = unique(gsub("(\\d{2}:\\d{2}:\\d{2})","",Tblock))
Tblock = gsub("\"\n" ,"",Tblock)
Tblock = gsub("\" ","",Tblock)
if (condition == TRUE){
if(length(flow) > 1 | length(par) > 1 | length(CO2) > 1 | length(Tblock) > 1) {
warning("Multiple measuring conditions. Check data collection conditions.")
print(c(flow,par,CO2,Tblock))
}
if(length(flow) == 0 | length(par) == 0 | length(CO2) == 0 | length(Tblock) == 0){
warning("Missing measuring conditions. Check data collection conditions.")
print(c(flow,par,CO2,Tblock))
}
}
#trim uneccessary parameters
colname = table[which(table$V1 == "Obs"),]
colnames(table) = colname
table = table[-c(1:(which(table[,1] == "Obs")+1)),c("Obs","HHMMSS","FTime","Photo","Cond","Ci/Ca")]
rownames(table)=1:nrow(table)
#eliminate remarks other than records
record = grep("(\\d{2}:\\d{2}:\\d{2})[[:space:]][[:digit:]]+",table$HHMMSS)
remark = which(table$Obs == "Remark=")
remove = remark[!remark %in% record]
table = table[-remove,]
rownames(table)=1:nrow(table)
#give name to measurement points
table$HHMMSS = gsub("(\\d{2}:\\d{2}:\\d{2})","",table$HHMMSS)
table$HHMMSS = gsub("\"","",table$HHMMSS)
table$HHMMSS = gsub("\n","",table$HHMMSS)
table$HHMMSS = gsub(" ","",table$HHMMSS)
table$HHMMSS = gsub("[[:alpha:]]","",table$HHMMSS)
table$HHMMSS[table$HHMMSS==""] <- "000"
# give records same length of 3 digits
digit3 = unique(table$HHMMSS)[grep("^[[:digit:]]{3}$",unique(table$HHMMSS))]
other = unique(table$HHMMSS)[!unique(table$HHMMSS) %in% digit3]
if(length(other)>1) {
cat("check out these names, are they 3 digits? \n",other)
cat("\nReformatting them into 3 digits...")
Sys.sleep(2) # just makes me feel like this functino is useful and is actually taking some time to fix this digit number problem.
table[grep("^[[:digit:]]{2}$",table$HHMMSS),"HHMMSS"] = paste("0",table[grep("^[[:digit:]]{2}$",table$HHMMSS),"HHMMSS"],sep="")
table[grep("^[[:digit:]]{1}$",table$HHMMSS),"HHMMSS"] = paste("00",table[grep("^[[:digit:]]{1}$",table$HHMMSS),"HHMMSS"],sep="")
cat("Done.")
}
table$name = table$HHMMSS
table$plot = table$HHMMSS
table$leaf = table$HHMMSS
table$leaf = leaf_rep
nameslist = which(!(table$HHMMSS=="000"))
for (row in 1:length(table$Obs)){
if (table[row,"plot"]=="000"){
firstline = which.max (  which(nameslist < row)  )
table[row,"plot"] = table[nameslist[firstline],"plot"]
table[row,"name"] = paste(table[nameslist[firstline],"plot"],"_",table[nameslist[firstline],"leaf"],sep="")
}
}
remark = which(table$Obs == "Remark=")
table = table[-remark,]
table = table[,-c(1,2)]
rownames(table)=1:nrow(table)
col.numeric = c(1,2,3,4)
table[,col.numeric] = apply(table[,col.numeric],2,function(x) as.numeric(x))
table = table[c(6,7,5,1,2,3,4)]
table$tag = filename
View(table)
names(table$`Ci/Ca`)
names(table) = c(names(table)[1:6],"Ci.Ca")
table$tag = filename
names(AllCurve)
names(AllCurve) = c(names(AllCurve)[1:6],"Ci.Ca",names(AllCurve)[8:12])
names(AllCurve)
save(AllCurve,file = "AllCurve.RData")
installed.packages("qtl")
install.packages("qtl")
library(IGEA)
?read.GX
readGX(filename,1,genolist)
read.GX(filename,1,genolist)
test = read.GX(filename,1,genolist)
summary(test)
aa = GetValue(test)
aa = GetValue.GXcurve(test)
summary(aa)
summary(aa,"Photo")
summary(aa,"Photo_first")
?PGMean
bb = PGMean(aa,"plot")
bb = PGMean.GXvalue(aa,"plot")
PGMean.GXvalue = function(table, type){
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
#define function to calculate standard error
se = function(x){
return(sd(x)/sqrt(length(x)))
}
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
#get rid of NA columns (if in the last GetValue function, only one of
#first or last minute values was chosen)
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
# assign class and attributes
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
bb = PGMean.GXvalue(aa,"plot")
bb = PGMean.GXvalue(aa,"plot")
table = aa
type = "plot"
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
#define function to calculate standard error
se = function(x){
return(sd(x)/sqrt(length(x)))
}
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
out$rep_number = table(table[,col])
#get rid of NA columns (if in the last GetValue function, only one of
#first or last minute values was chosen)
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
out = out[,c(13,14,1:12)]
View(out)
library(IGEA)
library(IGEA)
### Summary for GXcurve class
summary.GXcurve = function(table,value_summary = FALSE, check_condition = TRUE){
#basic data entry property
print(paste("Measurent count:",length(unique(table$name))))
print(paste("leaf number:",names(table(table$leaf))," observation counts:",
table(table$leaf)))
cat("\n### Data set included: ",unique(table$tag),sep="\n")
# print out data summary
if (value_summary){
print("Summary for Photosynthesis rate:")
print(summary(table$Photo))
print("Summary for water conductance:")
print(summary(table$Cond))
print("Summary for Ci.Ca:")
print(summary(table$"Ci.Ca"))
}
# also, type to see measurement conditions
if (check_condition != TRUE){
conditions = c("measurement_time","machine","lightsource","AD.avgtime",
"flow","par","CO2_mixer","Tblock")
if(check_condition %in% conditions){
cat("\nLooking at", check_condition,":\n")
print(attr(table,check_condition))
}else{
warnings("please input measurement_time/machine/
lightsource/AD.avgtime/flow/par/CO2_mixer/Tblock")
}
}
}
setwd("C:/Users/xieji/Desktop")
prompt(summary.GXcurve())
prompt(summary.GXcurve)
### Summary for GXcurve class
summary.GXcurve = function(table,value_summary = FALSE, check_condition = TRUE,...){
#basic data entry property
print(paste("Measurent count:",length(unique(table$name))))
print(paste("leaf number:",names(table(table$leaf))," observation counts:",
table(table$leaf)))
cat("\n### Data set included: ",unique(table$tag),sep="\n")
# print out data summary
if (value_summary){
print("Summary for Photosynthesis rate:")
print(summary(table$Photo))
print("Summary for water conductance:")
print(summary(table$Cond))
print("Summary for Ci.Ca:")
print(summary(table$"Ci.Ca"))
}
# also, type to see measurement conditions
if (check_condition != TRUE){
conditions = c("measurement_time","machine","lightsource","AD.avgtime",
"flow","par","CO2_mixer","Tblock")
if(check_condition %in% conditions){
cat("\nLooking at", check_condition,":\n")
print(attr(table,check_condition))
}else{
warnings("please input measurement_time/machine/
lightsource/AD.avgtime/flow/par/CO2_mixer/Tblock")
}
}
}
prompt(summary.GXcurve)
library(IGEA)
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/GXread.R")
library(IGEA)
leak1_718 = read.GX(filename = "KX 07-18-2017 ril leak1_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
setwd("~/GitHub/Instant-Gas-Exchange-Measurements/inst/extdata")
leak1_718 = read.GX(filename = "KX 07-18-2017 ril leak1_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak1_718 = read.GX(filename = "KX_07-18-2017_ril_leak1_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak2_718 = read.GX(filename = "KX_07-18-2017_RIL_leak2_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_718 = read.GX(filename = "TMW_07-18-2017_ril_stewart_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_719 = read.GX(filename = "KX_07-19-2017_RIL_leak1.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak1_720 = read.GX(filename = "nicole-7-20-2017-ril_leak1.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_720 = read.GX(filename = "KX_07-20-2017_RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_721 = read.GX(filename = "cm_07-21-2017_ril_leak1_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak2_721 = read.GX(filename = "cm_07-21-2017_ril_leak2_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
steward_721 = read.GX(filename = "KX_07-21-2017_RIL_STEWARD_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
CS(leak1_718)
CS.GXcurve(leak1_718)
AllValue = GetValue(AllCurve)
AllMean = PGMean(AllValue, "genotype")
AllValue = GetValue.GXcurve(AllCurve)
AllCurve = CS.GXcurve(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllValue = GetValue.GXcurve(AllCurve)
AllMean = PGMean(AllValue, "genotype")
AllMean = PGMean.GXvalue(AllValue, "genotype")
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/CS_GXcurve.R")
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
class(leak1_718)
CS
GetValue
data(AllCurve)
class(AllCurve)
library(IGEA)
leak1_718 = read.GX(filename = "KX_07-18-2017_ril_leak1_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak2_718 = read.GX(filename = "KX_07-18-2017_RIL_leak2_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_718 = read.GX(filename = "TMW_07-18-2017_ril_stewart_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_719 = read.GX(filename = "KX_07-19-2017_RIL_leak1.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak1_720 = read.GX(filename = "nicole-7-20-2017-ril_leak1.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_720 = read.GX(filename = "KX_07-20-2017_RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_721 = read.GX(filename = "cm_07-21-2017_ril_leak1_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak2_721 = read.GX(filename = "cm_07-21-2017_ril_leak2_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
steward_721 = read.GX(filename = "KX_07-21-2017_RIL_STEWARD_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllValue = GetValue(AllCurve)
remove(CS)
remove(CS.GXcurve)
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
library(IGEA)
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
library(IGEA)
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllValue = GetValue(AllCurve)
AllMean = PGMean(AllValue, "genotype")
AllMean
plot("Cond",genotype = c("Z019E0142"),dataset=all)
plot("Cond",genotype = c("Z019E0142"),dataset=AllCurve)
plotGX("Cond",genotype = c("Z019E0142"),dataset=AllCurve)
