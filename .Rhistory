remove(gl)
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/GXread.R")
leak1_718 = read.GX(filename = "KX 07-18-2017 ril leak1_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak2_718 = read.GX(filename = "KX 07-18-2017 RIL leak2_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
steward_718 = read.GX(filename = "TMW 07-18-2017 ril stewart_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak1_719 = read.GX(filename = "KX 07-19-2017 RIL_ leak1.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
leak1_720 = read.GX(filename = "nicole-7-20-2017-ril_leak1.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
steward_720 = read.GX(filename = "KX 07-20-2017 RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak1_721 = read.GX(filename = "cm 07-21-2017 ril leak1_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
leak2_721 = read.GX(filename = "cm 07-21-2017 ril leak2_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
steward_721 = read.GX(filename = "KX 07-21-2017 RIL STEWARD_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
leak1_721 = read.GX(filename = "cm 07-21-2017 ril leak1_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv",TRUE)
steward_720 = read.GX(filename = "KX 07-20-2017 RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic imformation.csv",TRUE)
steward_720 = read.GX(filename = "KX 07-20-2017 RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak1_721 = read.GX(filename = "cm 07-21-2017 ril leak1_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
install.packages("knitr")
install.packages("xtable")
install.packages("rmarkdown")
install.packages("viridis")
image(volcano, col = viridis(200))
library(viridis)
image(volcano, col = viridis(200))
library(viridis)
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/CS_GXcurve.R")
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllValue = GetValue(AllCurve)
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/GetValue_GXcurve.R")
AllValue = GetValue(AllCurve)
View(AllValue)
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/GXread.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/CS_GXcurve.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/GetValue_GXcurve.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/summary_GXcurve.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/Find_GXcurve.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/plotGX.R")
leak1_718 = read.GX(filename = "KX 07-18-2017 ril leak1_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
table = leak1_718
table = leak1_718[which(leak1_718$name == head(unique(leak1_718$name))),]
unique(table$name)
plot("Photo",table)
plotGX("Photo",table)
trait = "Photo"
sub = subset(dataset, genotype == genolist[i])
dataset = table
sub = subset(dataset, genotype == genolist[i])
if (length(table) > 0) {
t = TRUE
genolist = unique(table$genotype)
dataset = table
}else{ t = FALSE}
sub = subset(dataset, genotype == genolist[i])
i=1
genolist
sub = subset(dataset, genotype == genolist[i])
View(sub)
View(table)
View(leak1_718)
View(table)
which(leak1_718$name == head(unique(leak1_718$name)))
unique(leak1_718$name)
head(unique(leak1_718$name))
which(leak1_718$name == head(unique(leak1_718$name)))
View(leak1_718)
which(leak1_718$name == "120_1")
table = leak1_718[which(leak1_718$name == c("120_1"."132_1"),]
table = leak1_718[which(leak1_718$name == c("120_1","132_1"),]
table = leak1_718[which(leak1_718$name == c("120_1","132_1")),]
table = leak1_718[which(leak1_718$name %in% c("120_1","132_1")),]
plotGX("Photo",table)
plotGX = function(trait, table = NULL , genotype = NULL, id = NULL , dataset = NULL ){
if (length(table) > 0) {
t = TRUE
genolist = unique(table$genotype)
dataset = table
}else{ t = FALSE}
if (length(genotype) > 0 & nrow(dataset) > 0 ) {
if ( all(genotype %in% dataset$genotype) ){
g = TRUE
genolist = genotype
}else{
stop("genotype provided is not in the dataset.")
}
}else{ g = FALSE }
if (length(id) > 0 & nrow(dataset) > 0) {
if( all(id %in% dataset$name )){
d = TRUE
genolist = unique(dataset[which(dataset$name==id),"genotype"])
dataset = dataset[which(dataset$name==id),]
}else{
stop("id is not in the dataset.")
}
}else{ d = FALSE}
tgd = c(t,g,d)
if(sum(tgd == TRUE) != 1){
stop("Please have only one type of input.")
}else{
for (i in 1:length(genolist)) {
sub = subset(dataset, genotype == genolist[i])
sub = sub[order(as.numeric(sub$plot)),]
p=ggplot(sub, aes_string("FTime", trait)) +geom_point(aes(colour=name), size =5) + labs(title=paste(genolist[i],trait))+
theme_bw()+
theme(plot.title = element_text(size=30, face="bold"),
legend.title=element_blank(),
legend.text = element_text(size = 30),
legend.key.size = unit(2,"line"),
legend.position="bottom")
ggsave(filename=paste(trait," ",genolist[i],".png",sep=""))
cat("\n>>>>>>>>>>>>>>",genolist[i],trait,"curve saved")
}
}
}
plotGX("Photo",table)
plotGX = function(trait, table = NULL , genotype = NULL, id = NULL , dataset = NULL ){
if (length(table) > 0) {
t = TRUE
genolist = unique(table$genotype)
dataset = table
}else{ t = FALSE}
if (length(genotype) > 0 & nrow(dataset) > 0 ) {
if ( all(genotype %in% dataset$genotype) ){
g = TRUE
genolist = genotype
}else{
stop("genotype provided is not in the dataset.")
}
}else{ g = FALSE }
if (length(id) > 0 & nrow(dataset) > 0) {
if( all(id %in% dataset$name )){
d = TRUE
genolist = unique(dataset[which(dataset$name==id),"genotype"])
dataset = dataset[which(dataset$name==id),]
}else{
stop("id is not in the dataset.")
}
}else{ d = FALSE}
tgd = c(t,g,d)
if(sum(tgd == TRUE) != 1){
stop("Please have only one type of input.")
}else{
for (i in 1:length(genolist)) {
sub = subset(dataset, genotype == genolist[i])
sub = sub[order(as.numeric(sub$plot)),]
p=ggplot(sub, aes_string("FTime", trait)) +geom_point(aes(colour=name), size =5) + labs(title=paste(genolist[i],trait))+
theme_bw()+
theme(plot.title = element_text(size=30, face="bold"),
legend.title=element_blank(),
legend.text = element_text(size = 30),
legend.key.size = unit(2,"line"),
legend.position="bottom")
ggsave(filename=paste(trait," ",genolist[i],".png",sep=""))
cat(">>>>>>>>>>>>>>",genolist[i],trait,"curve saved\n")
}
}
}
plotGX("Photo",table)
prompt(Find.GXcurve)
promt(GetValue.GXcurve)
prompt(GetValue.GXcurve)
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/PGMean.R")
AllMean = PGMean(AllValue, "genotype")
AllValue = GetValue(AllCurve)
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
leak1_718 = read.GX(filename = "KX 07-18-2017 ril leak1_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak2_718 = read.GX(filename = "KX 07-18-2017 RIL leak2_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
steward_718 = read.GX(filename = "TMW 07-18-2017 ril stewart_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak1_719 = read.GX(filename = "KX 07-19-2017 RIL_ leak1.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
leak1_720 = read.GX(filename = "nicole-7-20-2017-ril_leak1.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
steward_720 = read.GX(filename = "KX 07-20-2017 RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak1_721 = read.GX(filename = "cm 07-21-2017 ril leak1_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
leak2_721 = read.GX(filename = "cm 07-21-2017 ril leak2_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
steward_721 = read.GX(filename = "KX 07-21-2017 RIL STEWARD_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllValue = GetValue(AllCurve)
AllMean = PGMean(AllValue, "genotype")
View(AllMean)
prompt(PGMean.GXvalue)
View(AllMean)
table = AllMean
table(table$leaf_replicate_number)
rep = table(table$leaf_replicate_number)
length(rep)
i=1
rep[i]
names(rep[1])
cat("There are",rep[i],"leaf(leaves) with", names(rep[i]),"replicate(s)" )
cat("There are",rep[i],"plot(s)/genotype(s) with", names(rep[i]),"replicate(s)" )
PGMean.GXvalue = function(table, type){
name = vector(mode="character", length=0)
leaf_replicate_number = vector(mode="numeric", length=0)
Photo_first_mean = vector(mode="numeric", length=0)
SE1 = vector(mode="numeric", length=0)
Cond_first_mean = vector(mode="numeric", length=0)
SE2 = vector(mode="numeric", length=0)
Ci.Ca_first_mean = vector(mode="numeric", length=0)
SE3 = vector(mode="numeric", length=0)
Photo_last_mean = vector(mode="numeric", length=0)
SE4 = vector(mode="numeric", length=0)
Cond_last_mean = vector(mode="numeric", length=0)
SE5 = vector(mode="numeric", length=0)
Ci.Ca_last_mean = vector(mode="numeric", length=0)
SE6 = vector(mode="numeric", length=0)
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
for (i in 1:length(unique(table[,col]))){
sub = table[which(table[,col] == unique(table[,col])[i]),]
name = c(name, sub[,col][1])
leaf_replicate_number = c(leaf_replicate_number, nrow(sub))
Photo_first_mean = c(Photo_first_mean, mean(sub$Photo_first))
SE1 = c(SE1, sd(sub$Photo_first)/sqrt(length(sub$Photo_first)))
Cond_first_mean = c(Cond_first_mean, mean(sub$Cond_first))
SE2 = c(SE2, sd(sub$Cond_first)/sqrt(length(sub$Cond_first)))
Ci.Ca_first_mean = c(Ci.Ca_first_mean, mean(sub$Ci.Ca_first))
SE3 = c(SE3, sd(sub$Ci.Ca_first)/sqrt(length(sub$Ci.Ca_first)))
Photo_last_mean = c(Photo_last_mean, mean(sub$Photo_last))
SE4 = c(SE4, sd(sub$Photo_last)/sqrt(length(sub$Photo_last)))
Cond_last_mean = c(Cond_last_mean, mean(sub$Cond_last))
SE5 = c(SE5, sd(sub$Cond_last)/sqrt(length(sub$Cond_last)))
Ci.Ca_last_mean = c(Ci.Ca_last_mean, mean(sub$Ci.Ca_last))
SE6 = c(SE6, sd(sub$Ci.Ca_last)/sqrt(length(sub$Ci.Ca_last)))
}
out = data.frame(name, leaf_replicate_number, Photo_first_mean, SE1, Cond_first_mean,
SE2, Ci.Ca_first_mean, SE3, Photo_last_mean, SE4, Cond_last_mean, SE5,
Ci.Ca_last_mean, SE6, stringsAsFactors = FALSE)
out = out[, colSums(is.na(out)) != nrow(out)]
class(out) = c("GXmean",class(out))
attributes(out, "type") = type
return(out)
}
AllMean = PGMean(AllValue, "genotype")
attributes(out, "type") = type
type = "genotype"
attributes(out, "type") = type
out = data.frame()
attributes(out, "type") = type
attr(out, "type") = type
PGMean.GXvalue = function(table, type){
name = vector(mode="character", length=0)
leaf_replicate_number = vector(mode="numeric", length=0)
Photo_first_mean = vector(mode="numeric", length=0)
SE1 = vector(mode="numeric", length=0)
Cond_first_mean = vector(mode="numeric", length=0)
SE2 = vector(mode="numeric", length=0)
Ci.Ca_first_mean = vector(mode="numeric", length=0)
SE3 = vector(mode="numeric", length=0)
Photo_last_mean = vector(mode="numeric", length=0)
SE4 = vector(mode="numeric", length=0)
Cond_last_mean = vector(mode="numeric", length=0)
SE5 = vector(mode="numeric", length=0)
Ci.Ca_last_mean = vector(mode="numeric", length=0)
SE6 = vector(mode="numeric", length=0)
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
for (i in 1:length(unique(table[,col]))){
sub = table[which(table[,col] == unique(table[,col])[i]),]
name = c(name, sub[,col][1])
leaf_replicate_number = c(leaf_replicate_number, nrow(sub))
Photo_first_mean = c(Photo_first_mean, mean(sub$Photo_first))
SE1 = c(SE1, sd(sub$Photo_first)/sqrt(length(sub$Photo_first)))
Cond_first_mean = c(Cond_first_mean, mean(sub$Cond_first))
SE2 = c(SE2, sd(sub$Cond_first)/sqrt(length(sub$Cond_first)))
Ci.Ca_first_mean = c(Ci.Ca_first_mean, mean(sub$Ci.Ca_first))
SE3 = c(SE3, sd(sub$Ci.Ca_first)/sqrt(length(sub$Ci.Ca_first)))
Photo_last_mean = c(Photo_last_mean, mean(sub$Photo_last))
SE4 = c(SE4, sd(sub$Photo_last)/sqrt(length(sub$Photo_last)))
Cond_last_mean = c(Cond_last_mean, mean(sub$Cond_last))
SE5 = c(SE5, sd(sub$Cond_last)/sqrt(length(sub$Cond_last)))
Ci.Ca_last_mean = c(Ci.Ca_last_mean, mean(sub$Ci.Ca_last))
SE6 = c(SE6, sd(sub$Ci.Ca_last)/sqrt(length(sub$Ci.Ca_last)))
}
out = data.frame(name, leaf_replicate_number, Photo_first_mean, SE1, Cond_first_mean,
SE2, Ci.Ca_first_mean, SE3, Photo_last_mean, SE4, Cond_last_mean, SE5,
Ci.Ca_last_mean, SE6, stringsAsFactors = FALSE)
out = out[, colSums(is.na(out)) != nrow(out)]
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
AllMean = PGMean(AllValue, "genotype")
attributes(AllMean)
attr(AllMean,"type")
table = AllMean
type = attr(table,"type")
type
cat("There are",rep[i],type,"(s) with", names(rep[i]),"replicate(s)" )
cat("There are",rep[i],type,"(s) with", names(rep[i]),"replicate(s)",sep = "")
cat("There are ",rep[i]," ",type,"(s) with", names(rep[i]),"replicate(s)",sep = "")
cat("There are ",rep[i]," ",type,"(s) with ", names(rep[i])," replicate(s)",sep = "")
for ( i in 1:length(rep)){
cat("There are ",rep[i]," ",type,"(s) with ", names(rep[i])," replicate(s)",sep = "")
}
for ( i in 1:length(rep)){
cat("There are ",rep[i]," ",type,"(s) with ", names(rep[i])," replicate(s)\n",sep = "")
}
trait = FALSE
trait != FALSE
trait = TRUE
trait != FALSE
PGMean.GXvalue = function(table, type){
name = vector(mode="character", length=0)
leaf_replicate_number = vector(mode="numeric", length=0)
Photo_first = vector(mode="numeric", length=0)
SE1 = vector(mode="numeric", length=0)
Cond_first = vector(mode="numeric", length=0)
SE2 = vector(mode="numeric", length=0)
Ci.Ca_first = vector(mode="numeric", length=0)
SE3 = vector(mode="numeric", length=0)
Photo_last = vector(mode="numeric", length=0)
SE4 = vector(mode="numeric", length=0)
Cond_last = vector(mode="numeric", length=0)
SE5 = vector(mode="numeric", length=0)
Ci.Ca_last = vector(mode="numeric", length=0)
SE6 = vector(mode="numeric", length=0)
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
for (i in 1:length(unique(table[,col]))){
sub = table[which(table[,col] == unique(table[,col])[i]),]
name = c(name, sub[,col][1])
leaf_replicate_number = c(leaf_replicate_number, nrow(sub))
Photo_first = c(Photo_first, mean(sub$Photo_first))
SE1 = c(SE1, sd(sub$Photo_first)/sqrt(length(sub$Photo_first)))
Cond_first = c(Cond_first, mean(sub$Cond_first))
SE2 = c(SE2, sd(sub$Cond_first)/sqrt(length(sub$Cond_first)))
Ci.Ca_first = c(Ci.Ca_first, mean(sub$Ci.Ca_first))
SE3 = c(SE3, sd(sub$Ci.Ca_first)/sqrt(length(sub$Ci.Ca_first)))
Photo_last = c(Photo_last, mean(sub$Photo_last))
SE4 = c(SE4, sd(sub$Photo_last)/sqrt(length(sub$Photo_last)))
Cond_last = c(Cond_last, mean(sub$Cond_last))
SE5 = c(SE5, sd(sub$Cond_last)/sqrt(length(sub$Cond_last)))
Ci.Ca_last = c(Ci.Ca_last, mean(sub$Ci.Ca_last))
SE6 = c(SE6, sd(sub$Ci.Ca_last)/sqrt(length(sub$Ci.Ca_last)))
}
out = data.frame(name, leaf_replicate_number, Photo_first, SE1, Cond_first,
SE2, Ci.Ca_first, SE3, Photo_last, SE4, Cond_last, SE5,
Ci.Ca_last, SE6, stringsAsFactors = FALSE)
out = out[, colSums(is.na(out)) != nrow(out)]
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
AllMean = PGMean(AllValue, "genotype")
### Summary for GXmean class
summary.GXmean = function(table, trait = FALSE){
type = attr(table,"type")
rep = table(table$leaf_replicate_number)
for ( i in 1:length(rep)){
cat("There are ",rep[i]," ",type,"(s) with ", names(rep[i])," replicate(s)\n",sep = "")
}
if(trait != FALSE){
traitlist = c("Photo_first","Cond_first","Ci.Ca_first","Photo_last","Cond_last","Ci.Ca_last")
if( trait %in% traitlist && length(trait)==1 ){
print(paste("Summary for",trait,":"))
print(summary(table[,trait]))
hist(table[,trait], breaks=20,main=paste("Histogram for",trait))
}else{
warnings("Please have single input: Photo_first/Cond_first/Ci.Ca_first/Photo_last/Cond_last/Ci.Ca_last")
}
}
}
summary(AllMean)
summary(AllMean,T)
### Summary for GXmean class
summary.GXmean = function(table, trait = FALSE){
type = attr(table,"type")
rep = table(table$leaf_replicate_number)
for ( i in 1:length(rep)){
cat("There are ",rep[i]," ",type,"(s) with ", names(rep[i])," replicate(s)\n",sep = "")
}
if(trait != FALSE){
traitlist = c("Photo_first","Cond_first","Ci.Ca_first","Photo_last","Cond_last","Ci.Ca_last")
if( trait %in% traitlist && length(trait)==1 ){
print(paste("Summary for",trait,":"))
print(summary(table[,trait]))
hist(table[,trait], breaks=20,main=paste("Histogram for",trait))
}else{
warnings("Please have single input: Photo_first/Cond_first/Ci.Ca_first/Photo_last/Cond_last/Ci.Ca_last")
}
}
}
summary.GXmean(AllMean)
summary.GXmean(AllMean,TURE)
summary.GXmean(AllMean,TRUE)
### Summary for GXvalue class
summary.GXvalue = function(table,trait = FALSE){
print(paste(nrow(table),"entries"))
print(paste("leaf number:",names(table(table$leaf))," counts:",table(table$leaf)))
if(trait != FALSE){
traitlist = c("Photo_first","Cond_first","Ci.Ca_first","Photo_last","Cond_last","Ci.Ca_last")
if( trait %in% traitlist && length(trait)==1 ){
print(paste("Summary for",trait,":"))
print(summary(table[,trait]))
hist(table[,trait], breaks=20,main=paste("Histogram for",trait))
}else{
warnings("Please have single input: Photo_first/Cond_first/Ci.Ca_first/Photo_last/Cond_last/Ci.Ca_last")
}
}
}
### Summary for GXcurve class
summary.GXcurve = function(table,value_summary = FALSE, check_condition = FALSE){
#basic data entry property
print(paste("Measurent count:",length(unique(table$name))))
print(paste("leaf number:",names(table(table$leaf))," counts:",table(table$leaf)))
cat("\n### Data set included: ",unique(table$tag),"\n",sep="\n")
# print out data summary
if (value_summary){
print("Summary for Photosynthesis rate:")
print(summary(table$Photo))
print("Summary for water conductance:")
print(summary(table$Cond))
print("Summary for Ci/Ca:")
print(summary(table$"Ci/Ca"))
}
# also, type to see measurement conditions
if (check_condition){
object = readline(prompt="Which condition do you want to look at?\nmeasurement_time/machine/lightsource\nAD.avgtime/flow/par/CO2_mixer/Tblock\n     ")
print(attr(table,object))
}
}
summary.GXmean(AllMean,TRUE)
summary.GXmean(AllMean,"Photo_first")
hist(table[,trait], breaks=20,main=paste("Histogram for",trait),xlab = trait)
### Summary for GXmean class
summary.GXmean = function(table, trait = FALSE){
type = attr(table,"type")
rep = table(table$leaf_replicate_number)
for ( i in 1:length(rep)){
cat("There are ",rep[i]," ",type,"(s) with ", names(rep[i])," replicate(s)\n",sep = "")
}
if(trait != FALSE){
traitlist = c("Photo_first","Cond_first","Ci.Ca_first","Photo_last","Cond_last","Ci.Ca_last")
if( trait %in% traitlist && length(trait)==1 ){
print(paste("Summary for",trait,":"))
print(summary(table[,trait]))
hist(table[,trait], breaks=20,main=paste("Histogram for",trait),xlab = trait)
}else{
warnings("Please have single input: Photo_first/Cond_first/Ci.Ca_first/Photo_last/Cond_last/Ci.Ca_last")
}
}
}
summary.GXmean(AllMean,"Photo_first")
summary.GXmean(AllMean,"Photo_first")
### Summary for GXmean class
summary.GXmean = function(table, trait){
type = attr(table,"type")
rep = table(table$leaf_replicate_number)
for ( i in 1:length(rep)){
cat("There are ",rep[i]," ",type,"(s) with ", names(rep[i])," replicate(s)\n",sep = "")
}
traitlist = c("Photo_first","Cond_first","Ci.Ca_first","Photo_last","Cond_last","Ci.Ca_last")
if( trait %in% traitlist && length(trait)==1 ){
print(paste("Summary for",trait,":"))
print(summary(table[,trait]))
hist(table[,trait], breaks=20,main=paste("Histogram for",trait),xlab = trait)
}else{
warnings("Please have single input: Photo_first/Cond_first/Ci.Ca_first/Photo_last/Cond_last/Ci.Ca_last")
}
}
summary.GXmean(AllMean,"Photo_first")
summary.GXmean(AllMean,"Photo_fir")
prompt(summary.GXcurve)
summary(AllCurve)
prompt(summary.GXmean)
prompt(summary.GXvalue)
summary.GXvalue(AllValue)
summary.GXvalue(AllValue,"Photo_first")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/GXread.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/CS_GXcurve.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/GetValue_GXcurve.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/Find_GXcurve.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/plotGX.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/PGMean.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/summary_GXcurve.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/summary_GXvalue.R")
source("~/GitHub/Instant-Gas-Exchange-Measurements/R/summary_GXmean.R")
leak1_718 = read.GX(filename = "KX 07-18-2017 ril leak1_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak2_718 = read.GX(filename = "KX 07-18-2017 RIL leak2_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
steward_718 = read.GX(filename = "TMW 07-18-2017 ril stewart_.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak1_719 = read.GX(filename = "KX 07-19-2017 RIL_ leak1.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
leak1_720 = read.GX(filename = "nicole-7-20-2017-ril_leak1.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
steward_720 = read.GX(filename = "KX 07-20-2017 RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic imformation.csv")
leak1_721 = read.GX(filename = "cm 07-21-2017 ril leak1_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
leak2_721 = read.GX(filename = "cm 07-21-2017 ril leak2_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
steward_721 = read.GX(filename = "KX 07-21-2017 RIL STEWARD_.csv",leaf_rep = 2,genolist = "genotypic imformation.csv")
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllValue = GetValue(AllCurve)
AllMean = PGMean(AllValue, "genotype")
class(AllMean)
class(AllValue)
class(AllCurve)
save.image("~/GitHub/Instant-Gas-Exchange-Measurements/data/data.RData")
setwd("~/GitHub/Instant-Gas-Exchange-Measurements/inst/extdata")
getwd()
