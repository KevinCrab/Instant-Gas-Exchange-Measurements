# number of consecutive observation in each measurement
consecutive_observation = end_index - start_index + 1
set = table[end_index, "tag"]
print(paste(start_index,"th to ",end_index,"th observation (",consecutive_observation," counts) in ",set,sep=""))
}
}
unique(names(leak1_718))
unique(leak1_718$name)
Find.GXcurve("120_1",leak1_718)
Find.GXcurve(leak1_718,id = "120_1")
plotGX( id  = "120_1", dataset = leak1_718)
plotGX( id  = "120_1", dataset = leak1_718, trait = "Photo")
data(AllCurve)
library(IGEA)
View(leak1_718)
plotGX( genotype  = "Z019E0032", dataset = AllCurve, trait = "Photo")
plotGX( genotype  = "Z019E0131", dataset = AllCurve, trait = "Photo")
plotGX( genotype  = "Z019E0142", dataset = AllCurve, trait = "Photo")
plotGX( genotype  = "Z019E0142", dataset = AllCurve, trait = "Cond")
Find.GXcurve(leak1_718,id = "120_1")
Find(leak1_718,id = "120_1")
Find(leak1_718,id = "120_1")
Find
summary(leak1_718)
Find
base::summary
find
Find
FindGX
library(IGEA)
data("leak1_718")
plotGX(Leak1_718,"Photo")
CS(leak1_718)
a =   CS(leak1_718)
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
data("leak1_718")
data("leak1_719")
data("leak1_720")
data(leak2_718)
data("leak2_718")
leak1_718 = read.GX(filename = "KX_07-18-2017_ril_leak1_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak2_718 = read.GX(filename = "KX_07-18-2017_RIL_leak2_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_718 = read.GX(filename = "TMW_07-18-2017_ril_stewart_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_719 = read.GX(filename = "KX_07-19-2017_RIL_leak1.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak1_720 = read.GX(filename = "nicole-7-20-2017-ril_leak1.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_720 = read.GX(filename = "KX_07-20-2017_RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_721 = read.GX(filename = "cm_07-21-2017_ril_leak1_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak2_721 = read.GX(filename = "cm_07-21-2017_ril_leak2_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
steward_721 = read.GX(filename = "KX_07-21-2017_RIL_STEWARD_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
setwd("~/GitHub/Instant-Gas-Exchange-Measurements/inst/extdata")
leak1_718 = read.GX(filename = "KX_07-18-2017_ril_leak1_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak2_718 = read.GX(filename = "KX_07-18-2017_RIL_leak2_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_718 = read.GX(filename = "TMW_07-18-2017_ril_stewart_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_719 = read.GX(filename = "KX_07-19-2017_RIL_leak1.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak1_720 = read.GX(filename = "nicole-7-20-2017-ril_leak1.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_720 = read.GX(filename = "KX_07-20-2017_RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_721 = read.GX(filename = "cm_07-21-2017_ril_leak1_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak2_721 = read.GX(filename = "cm_07-21-2017_ril_leak2_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
steward_721 = read.GX(filename = "KX_07-21-2017_RIL_STEWARD_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
setwd("C:/Users/xieji/Desktop/test")
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllValue = GetValue(AllCurve)
AllMean = PGMean(AllValue, "genotype")
AllMean
plotGX("Cond",genotype = c("Z019E0142"),dataset=AllCurve)
summary(AllCurve)
summary(AllValue)
summary(AllValue,"Photo")
summary(AllValue,"Photo_first")
summary(AllMean,"Photo_first")
data(AllMean)
summary(AllMean)
summary(AllMean, "Photo_first")
head(AllMean)
summary(AllMean,"Photo_first")
library(IGEA)
leak1_718 = read.GX(filename = "KX_07-18-2017_ril_leak1_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak2_718 = read.GX(filename = "KX_07-18-2017_RIL_leak2_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_718 = read.GX(filename = "TMW_07-18-2017_ril_stewart_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_719 = read.GX(filename = "KX_07-19-2017_RIL_leak1.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak1_720 = read.GX(filename = "nicole-7-20-2017-ril_leak1.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_720 = read.GX(filename = "KX_07-20-2017_RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_721 = read.GX(filename = "cm_07-21-2017_ril_leak1_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak2_721 = read.GX(filename = "cm_07-21-2017_ril_leak2_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
steward_721 = read.GX(filename = "KX_07-21-2017_RIL_STEWARD_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
setwd("~/GitHub/Instant-Gas-Exchange-Measurements/inst/extdata")
leak1_718 = read.GX(filename = "KX_07-18-2017_ril_leak1_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak2_718 = read.GX(filename = "KX_07-18-2017_RIL_leak2_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_718 = read.GX(filename = "TMW_07-18-2017_ril_stewart_.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_719 = read.GX(filename = "KX_07-19-2017_RIL_leak1.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak1_720 = read.GX(filename = "nicole-7-20-2017-ril_leak1.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
steward_720 = read.GX(filename = "KX_07-20-2017_RIL_Stewart.csv",leaf_rep = 1,genolist = "genotypic_information.csv")
leak1_721 = read.GX(filename = "cm_07-21-2017_ril_leak1_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
leak2_721 = read.GX(filename = "cm_07-21-2017_ril_leak2_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
steward_721 = read.GX(filename = "KX_07-21-2017_RIL_STEWARD_.csv",leaf_rep = 2,genolist = "genotypic_information.csv")
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllValue = GetValue(AllCurve)
AllMean = PGMean(AllValue, "genotype")
summary(AllMean,"Photo_first")
data(AllMean)
summary(AllMean,"Photo_first")
AllMean = PGMean(AllValue, "genotype")
summary(AllMean,"Photo_first")
View(AllMean)
data(AllMean)
AllMean = PGMean(AllValue, "genotype")
data(AllCurve)
summary(AllCurve)
AllCurve = CS(leak1_718,leak2_718,leak1_719,leak1_720,leak1_721,leak2_721,steward_720,steward_721,steward_718)
AllValue = GetValue(AllCurve)
AllMean = PGMean(AllValue, "genotype")
save(AllMean, "AllMean.RData")
save(AllMean, "AllMean.RData")
save(AllMean, file = "AllMean.RData")
setwd("~/GitHub/Instant-Gas-Exchange-Measurements/inst/extdata")
getwd()
plotGX(trait = "Cond", genotype = "Z019E0032", dataset = AllCurve )
getwd()
png(filename = "Cond Z019E0032.png"
)
plot(png(filename = "Cond Z019E0032.png"))
genolist =  "Z019E0032"
sub = subset(dataset, genotype == genolist[i])
dataset = AllCurve
sub = subset(dataset, genotype == genolist)
sub = sub[order(as.numeric(sub$plot)),]
ggplot(sub, aes_string("FTime", trait)) +geom_point(aes(colour=name), size =5) + labs(title=paste(genolist[i],trait))+
theme_bw()+
theme(plot.title = element_text(size=30, face="bold"),
legend.title=element_blank(),
legend.text = element_text(size = 30),
legend.key.size = unit(2,"line"),
legend.position="bottom")
library(ggplot2)
ggplot(sub, aes_string("FTime", trait)) +geom_point(aes(colour=name), size =5) + labs(title=paste(genolist[i],trait))+
theme_bw()+
theme(plot.title = element_text(size=30, face="bold"),
legend.title=element_blank(),
legend.text = element_text(size = 30),
legend.key.size = unit(2,"line"),
legend.position="bottom")
trait = "Cond"
ggplot(sub, aes_string("FTime", trait)) +geom_point(aes(colour=name), size =5) + labs(title=paste(genolist[i],trait))+
theme_bw()+
theme(plot.title = element_text(size=30, face="bold"),
legend.title=element_blank(),
legend.text = element_text(size = 30),
legend.key.size = unit(2,"line"),
legend.position="bottom")
ggplot(sub, aes_string("FTime", trait)) +geom_point(aes(colour=name), size =5) + labs(title=paste(genolist,trait))+
theme_bw()+
theme(plot.title = element_text(size=30, face="bold"),
legend.title=element_blank(),
legend.text = element_text(size = 30),
legend.key.size = unit(2,"line"),
legend.position="bottom")
p = ggplot(sub, aes_string("FTime", trait)) +geom_point(aes(colour=name), size =5) + labs(title=paste(genolist,trait))+
theme_bw()+
theme(plot.title = element_text(size=30, face="bold"),
legend.title=element_blank(),
legend.text = element_text(size = 30),
legend.key.size = unit(2,"line"),
legend.position="bottom")
p
plot(p)
p = ggplot(sub, aes_string("FTime", trait)) +geom_point(aes(colour=name), size =5) + labs(title=paste(genolist,trait))+
theme_bw()+
theme(plot.title = element_text(size=30, face="bold"),
legend.title=element_blank(),
legend.text = element_text(size = 30),
legend.key.size = unit(2,"line"),
legend.position="bottom")
plot(p)
p
plot(1:5)
plot(1:5,3:8)
plot(1:5,3:7)
table = AllCurve
id = "100_3"
id_all = vector()
duplicatelist = vector()
toosmall_names = vector()
missrecording = vector()
id_all = c(id_all,id)
id_all
#check id length
if(length(id_all)==0){
stop("Please put in an ID.")
}
names(id_all)
unique(AllCurve$name)
id_all %in% unique(AllCurve$name)
!id_all %in% unique(AllCurve$name)
#FindGX
FindGX = function(table, id = NULL, DuplicateName = FALSE, MissRecording = FALSE, TooSmall = FALSE){
id_all = vector()
duplicatelist = vector()
toosmall_names = vector()
missrecording = vector()
id_all = c(id_all,id)
# read in id names that need to be found
if(DuplicateName == TRUE){
duplicatelist = attr(table, "duplicatelist")
id_all = c(id_all, duplicatelist)}
if(MissRecording == TRUE){
missrecording = attr(table, "missrecording")
id_all = c(id_all, missrecording)}
if(TooSmall == TRUE){
toosmall_names = attr(table, "toosmall_names")
id_all = c(id_all, toosmall_names)}
names(id_all) = c(rep("input",length(id)),
rep("Duplicate name",length(duplicatelist)),
rep("Missrecording",length( missrecording)),
rep("too few observations",length(toosmall_names)))
#check valid id
if(length(id_all)==0){
stop("Please put in an ID.")
}
if(!id_all %in% unique(AllCurve$name)){
warning("id not in dataset")
}
#find start line, end line for each id in the list
for (j in 1:length(id_all)){
cat("\n")
cat(">>>",j,"th sample name:",id_all[j],"    issue: ",names(id_all[j]),
" \n",sep="")
index = which(table$name == id_all[j])
start_index = vector()
end_index = vector()
start_index = c(start_index,index[1])
# loop through dataset to record locations(might appear multiple times)
for(x in 1:(length(index)-1)){
if(index[x+1] != (index[x]+1)){
start_index = c(start_index, index[x+1])
end_index = c(end_index, index[x])
}
}
end_index = c(end_index,index[length(index)])
# number of consecutive observation in each measurement
consecutive_observation = end_index - start_index + 1
set = table[end_index, "tag"]
print(paste(start_index,"th to ",end_index,"th observation (",consecutive_observation," counts) in ",set,sep=""))
}
}
FindGX(AllCurve, id = c("001_1"))
FindGX(AllCurve, id = c("001_1", "002_2"))
FindGX(AllCurve, id = c("002_1"))
#FindGX
FindGX = function(table, id = NULL, DuplicateName = FALSE, MissRecording = FALSE, TooSmall = FALSE){
id_all = vector()
duplicatelist = vector()
toosmall_names = vector()
missrecording = vector()
id_all = c(id_all,id)
# read in id names that need to be found
if(DuplicateName == TRUE){
duplicatelist = attr(table, "duplicatelist")
id_all = c(id_all, duplicatelist)}
if(MissRecording == TRUE){
missrecording = attr(table, "missrecording")
id_all = c(id_all, missrecording)}
if(TooSmall == TRUE){
toosmall_names = attr(table, "toosmall_names")
id_all = c(id_all, toosmall_names)}
names(id_all) = c(rep("input",length(id)),
rep("Duplicate name",length(duplicatelist)),
rep("Missrecording",length( missrecording)),
rep("too few observations",length(toosmall_names)))
#check valid id
if(length(id_all)==0){
stop("Please put in an ID.")
}
if(!id_all %in% unique(AllCurve$name)){
stop("id not in dataset")
}
#find start line, end line for each id in the list
for (j in 1:length(id_all)){
cat("\n")
cat(">>>",j,"th sample name:",id_all[j],"    issue: ",names(id_all[j]),
" \n",sep="")
index = which(table$name == id_all[j])
start_index = vector()
end_index = vector()
start_index = c(start_index,index[1])
# loop through dataset to record locations(might appear multiple times)
for(x in 1:(length(index)-1)){
if(index[x+1] != (index[x]+1)){
start_index = c(start_index, index[x+1])
end_index = c(end_index, index[x])
}
}
end_index = c(end_index,index[length(index)])
# number of consecutive observation in each measurement
consecutive_observation = end_index - start_index + 1
set = table[end_index, "tag"]
print(paste(start_index,"th to ",end_index,"th observation (",consecutive_observation," counts) in ",set,sep=""))
}
}
FindGX(AllCurve, id = c("002_1"))
FindGX(AllCurve, id = c("003_1"))
FindGX(AllCurve, id = c("001_1","003_1"))
length(id_all)
#FindGX
FindGX = function(table, id = NULL, DuplicateName = FALSE, MissRecording = FALSE, TooSmall = FALSE){
)
#FindGX
FindGX = function(table, id = NULL, DuplicateName = FALSE, MissRecording = FALSE, TooSmall = FALSE){
FindGX = function(table, id = NULL, DuplicateName = FALSE, MissRecording = FALSE, TooSmall = FALSE){
id_all = vector()
duplicatelist = vector()
toosmall_names = vector()
missrecording = vector()
id_all = c(id_all,id)
# read in id names that need to be found
if(DuplicateName == TRUE){
duplicatelist = attr(table, "duplicatelist")
id_all = c(id_all, duplicatelist)}
if(MissRecording == TRUE){
missrecording = attr(table, "missrecording")
id_all = c(id_all, missrecording)}
if(TooSmall == TRUE){
toosmall_names = attr(table, "toosmall_names")
id_all = c(id_all, toosmall_names)}
names(id_all) = c(rep("input",length(id)),
rep("Duplicate name",length(duplicatelist)),
rep("Missrecording",length( missrecording)),
rep("too few observations",length(toosmall_names)))
#check valid id
if(length(id_all)==0){
stop("Please put in an ID.")
}
for(i in 1:length(id_all)){
if(!id_all[i] %in% unique(AllCurve$name){
stop("id not in dataset")
}
}
#find start line, end line for each id in the list
for (j in 1:length(id_all)){
cat("\n")
cat(">>>",j,"th sample name:",id_all[j],"    issue: ",names(id_all[j]),
" \n",sep="")
index = which(table$name == id_all[j])
start_index = vector()
end_index = vector()
start_index = c(start_index,index[1])
# loop through dataset to record locations(might appear multiple times)
for(x in 1:(length(index)-1)){
if(index[x+1] != (index[x]+1)){
start_index = c(start_index, index[x+1])
end_index = c(end_index, index[x])
}
}
end_index = c(end_index,index[length(index)])
# number of consecutive observation in each measurement
consecutive_observation = end_index - start_index + 1
set = table[end_index, "tag"]
print(paste(start_index,"th to ",end_index,"th observation (",consecutive_observation," counts) in ",set,sep=""))
}
}
#FindGX
FindGX = function(table, id = NULL, DuplicateName = FALSE, MissRecording = FALSE, TooSmall = FALSE){
}
for(i in 1:length(id_all)){
if(!id_all[i] %in% unique(AllCurve$name){
stop("id not in dataset")
}
}
#find start line, end line for each id in the list
for (j in 1:length(id_all)){
cat("\n")
cat(">>>",j,"th sample name:",id_all[j],"    issue: ",names(id_all[j]),
" \n",sep="")
index = which(table$name == id_all[j])
start_index = vector()
end_index = vector()
start_index = c(start_index,index[1])
# loop through dataset to record locations(might appear multiple times)
for(x in 1:(length(index)-1)){
if(index[x+1] != (index[x]+1)){
start_index = c(start_index, index[x+1])
end_index = c(end_index, index[x])
}
}
end_index = c(end_index,index[length(index)])
# number of consecutive observation in each measurement
consecutive_observation = end_index - start_index + 1
set = table[end_index, "tag"]
print(paste(start_index,"th to ",end_index,"th observation (",consecutive_observation," counts) in ",set,sep=""))
}
}
for(i in 1:length(id_all)){
if(!id_all[i] %in% unique(AllCurve$name){
stop("id not in dataset")
}
}
i in 1:length(id_all)
length(id_all)
1:length(id_all)
id_all
id_all = "001_1"
for(i in 1:length(id_all)){
if(!id_all[i] %in% unique(AllCurve$name){
stop("id not in dataset")
}
}
#find start line, end line for each id in the list
for (j in 1:length(id_all)){
cat("\n")
cat(">>>",j,"th sample name:",id_all[j],"    issue: ",names(id_all[j]),
" \n",sep="")
index = which(table$name == id_all[j])
start_index = vector()
end_index = vector()
start_index = c(start_index,index[1])
# loop through dataset to record locations(might appear multiple times)
for(x in 1:(length(index)-1)){
if(index[x+1] != (index[x]+1)){
start_index = c(start_index, index[x+1])
end_index = c(end_index, index[x])
}
}
end_index = c(end_index,index[length(index)])
# number of consecutive observation in each measurement
consecutive_observation = end_index - start_index + 1
set = table[end_index, "tag"]
print(paste(start_index,"th to ",end_index,"th observation (",consecutive_observation," counts) in ",set,sep=""))
}
}
for(i in 1:length(id_all)){
if(!id_all[i] %in% unique(AllCurve$name)){
stop("id not in dataset")
}
}
#FindGX
FindGX = function(table, id = NULL, DuplicateName = FALSE, MissRecording = FALSE, TooSmall = FALSE){
id_all = vector()
duplicatelist = vector()
toosmall_names = vector()
missrecording = vector()
id_all = c(id_all,id)
# read in id names that need to be found
if(DuplicateName == TRUE){
duplicatelist = attr(table, "duplicatelist")
id_all = c(id_all, duplicatelist)}
if(MissRecording == TRUE){
missrecording = attr(table, "missrecording")
id_all = c(id_all, missrecording)}
if(TooSmall == TRUE){
toosmall_names = attr(table, "toosmall_names")
id_all = c(id_all, toosmall_names)}
names(id_all) = c(rep("input",length(id)),
rep("Duplicate name",length(duplicatelist)),
rep("Missrecording",length( missrecording)),
rep("too few observations",length(toosmall_names)))
#check valid id
if(length(id_all)==0){
stop("Please put in an ID.")
}
for(i in 1:length(id_all)){
if(!id_all[i] %in% unique(AllCurve$name)){
stop("id not in dataset")
}
}
#find start line, end line for each id in the list
for (j in 1:length(id_all)){
cat("\n")
cat(">>>",j,"th sample name:",id_all[j],"    issue: ",names(id_all[j]),
" \n",sep="")
index = which(table$name == id_all[j])
start_index = vector()
end_index = vector()
start_index = c(start_index,index[1])
# loop through dataset to record locations(might appear multiple times)
for(x in 1:(length(index)-1)){
if(index[x+1] != (index[x]+1)){
start_index = c(start_index, index[x+1])
end_index = c(end_index, index[x])
}
}
end_index = c(end_index,index[length(index)])
# number of consecutive observation in each measurement
consecutive_observation = end_index - start_index + 1
set = table[end_index, "tag"]
print(paste(start_index,"th to ",end_index,"th observation (",consecutive_observation," counts) in ",set,sep=""))
}
}
FindGX(AllCurve, "001_1")
FindGX(AllCurve, c("001_1","002_2"))
FindGX(AllCurve, c("001_1","001_2"))
FindGX(AllCurve, c("001_1","003_2"))
unique(AllCurve$name)
sort(unique(AllCurve$name)
)
FindGX(AllCurve, c("001_1","001_2"))
FindGX(AllCurve, c("003_1","003_2"))
names(AllValue)
### Summary for GXvalue class
summary.GXvalue = function(object,trait, ...){
print(paste(nrow(object),"entries"))
print(paste("leaf number:",names(table(object$leaf))," counts:",table(object$leaf)))
traitlist = c("Photo_first","Cond_first","Ci.Ca_first","Photo_last","Cond_last","Ci.Ca_last")
if( trait %in% traitlist && length(trait)==1 ){
print(paste("Summary for",trait,":"))
print(summary(object[,trait]))
hist(object[,trait], breaks=20,main=paste("Histogram for",trait),xlab = trait)
}else{
stop("Please have single input: Photo_first/Cond_first/Ci.Ca_first/Photo_last/Cond_last/Ci.Ca_last")
}
}
summary.GXvalue(AllValue, "Photo")
summary.GXvalue(AllValue, "Photo_first")
