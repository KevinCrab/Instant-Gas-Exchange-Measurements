class(AllCurve)
save.image("~/GitHub/Instant-Gas-Exchange-Measurements/data/data.RData")
setwd("~/GitHub/Instant-Gas-Exchange-Measurements/inst/extdata")
getwd()
library(IGEA)
prompt(AllValue)
load("~/GitHub/Instant-Gas-Exchange-Measurements/data/AllValue.RData")
prompt(AllValue)
load("~/GitHub/Instant-Gas-Exchange-Measurements/data/AllMean.RData")
prompt(AllMean)
head(AllValue)
load("~/GitHub/Instant-Gas-Exchange-Measurements/data/AllCurve.RData")
head(AllCurve)
head(AllMean)
load("~/GitHub/Instant-Gas-Exchange-Measurements/data/leak1_718.RData")
load("~/GitHub/Instant-Gas-Exchange-Measurements/data/leak1_719.RData")
load("~/GitHub/Instant-Gas-Exchange-Measurements/data/leak1_720.RData")
prompt(leak1_718)
prompt(leak1_720)
leak1_719
prompt(leak1_719)
# Combining and Screenig function
CS = function(table,...){
UseMethod("CS", table)
}
prompt(CS)
### plot out graphs for each individual leaf, categoried by genotype
plotGX = function(trait, table = NULL , genotype = NULL, id = NULL , dataset = NULL ){
# check table argument provided or not
if (length(table) > 0) {
t = TRUE
genolist = unique(table$genotype)
dataset = table
}else{ t = FALSE}
# check genotype+dataset combination argument provided or not
if (length(genotype) > 0 & nrow(dataset) > 0 ) {
if ( all(genotype %in% dataset$genotype) ){
g = TRUE
genolist = genotype
}else{
stop("genotype provided is not in the dataset.")
}
}else{ g = FALSE }
# check id+dataset combination argument provided or not
if (length(id) > 0 & nrow(dataset) > 0) {
if( all(id %in% dataset$name )){
d = TRUE
genolist = unique(dataset[which(dataset$name==id),"genotype"])
dataset = dataset[which(dataset$name==id),]
}else{
stop("id is not in the dataset.")
}
}else{ d = FALSE}
# only one of these three types of inputs can be allowed in one run
tgd = c(t,g,d)
if(sum(tgd == TRUE) != 1){
stop("Please have only one type of input.")
}else{
# plot out selected trait of selected entry
for (i in 1:length(genolist)) {
sub = subset(dataset, genotype == genolist[i])
sub = sub[order(as.numeric(sub$plot)),]
p=ggplot(sub, aes_string("FTime", trait)) +geom_point(aes(colour=name), size =5) + labs(title=paste(genolist[i],trait))+
theme_bw()+
theme(plot.title = element_text(size=30, face="bold"),
legend.title=element_blank(),
legend.text = element_text(size = 30),
legend.key.size = unit(2,"line"),
legend.position="bottom")
ggsave(filename=paste(trait," ",genolist[i],".png",sep=""))
cat(">>>>>>>>>>>>>>",genolist[i],trait,"curve saved\n")
}
}
}
plotGX(trait = "Photo", table = AllCurve )
library(ggplot2)
plotGX(trait = "Photo", table = AllCurve )
plotGX(trait = "Cond", genotype = "Z019E0032", dataset = AllCurve )
genotype = NULL
length(genotype)
length(genotype) > 0
length(genotype) > 0 & nrow(dataset) > 0
dataset = AllCurve
length(genotype) > 0 & nrow(dataset) > 0
nrow(dataset)
head(leak1_718)
prompt(plotGX)
PGMean.GXvalue = function(table, type){
name = vector(mode="character", length=0)
leaf_replicate_number = vector(mode="numeric", length=0)
Photo_first = vector(mode="numeric", length=0)
SE1 = vector(mode="numeric", length=0)
Cond_first = vector(mode="numeric", length=0)
SE2 = vector(mode="numeric", length=0)
Ci.Ca_first = vector(mode="numeric", length=0)
SE3 = vector(mode="numeric", length=0)
Photo_last = vector(mode="numeric", length=0)
SE4 = vector(mode="numeric", length=0)
Cond_last = vector(mode="numeric", length=0)
SE5 = vector(mode="numeric", length=0)
Ci.Ca_last = vector(mode="numeric", length=0)
SE6 = vector(mode="numeric", length=0)
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
for (i in 1:length(unique(table[,col]))){
sub = table[which(table[,col] == unique(table[,col])[i]),]
name = c(name, sub[,col][1])
leaf_replicate_number = c(leaf_replicate_number, nrow(sub))
Photo_first = c(Photo_first, mean(sub$Photo_first))
SE1 = c(SE1, sd(sub$Photo_first)/sqrt(length(sub$Photo_first)))
Cond_first = c(Cond_first, mean(sub$Cond_first))
SE2 = c(SE2, sd(sub$Cond_first)/sqrt(length(sub$Cond_first)))
Ci.Ca_first = c(Ci.Ca_first, mean(sub$Ci.Ca_first))
SE3 = c(SE3, sd(sub$Ci.Ca_first)/sqrt(length(sub$Ci.Ca_first)))
Photo_last = c(Photo_last, mean(sub$Photo_last))
SE4 = c(SE4, sd(sub$Photo_last)/sqrt(length(sub$Photo_last)))
Cond_last = c(Cond_last, mean(sub$Cond_last))
SE5 = c(SE5, sd(sub$Cond_last)/sqrt(length(sub$Cond_last)))
Ci.Ca_last = c(Ci.Ca_last, mean(sub$Ci.Ca_last))
SE6 = c(SE6, sd(sub$Ci.Ca_last)/sqrt(length(sub$Ci.Ca_last)))
}
out = data.frame(name, leaf_replicate_number, Photo_first, SE1, Cond_first,
SE2, Ci.Ca_first, SE3, Photo_last, SE4, Cond_last, SE5,
Ci.Ca_last, SE6, stringsAsFactors = FALSE)
out = out[, colSums(is.na(out)) != nrow(out)]
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
PGMean.GXvalue(AllValue, "plot")
type = "plot"
table = AllValue
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
unique(table[,col]))
unique(table[,col])
namelist = unique(table[,col])
tapply(table$Photo_first, namelist, mean, na.rm = TRUE)
tapply(table$Photo_first, namelist[1] , mean, na.rm = TRUE)
table$Photo_first
tapply(table$Photo_first, table$name , mean, na.rm = TRUE)
tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
length(tapply(table$Photo_first, table$plot , mean, na.rm = TRUE))
unique(table$plot)
length(unique(table$plot))
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE))
str(Photo_first)
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE))
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
str(Photo_first)
tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
se = function(x){
return(sd(x)/sqrt(length(x)))
}
tapply(table$Photo_first, table$plot , se, na.rm = TRUE)
tapply(table$Photo_first, table$plot , se)
sd = tapply(table$Photo_first, table$plot , se))
sd = tapply(table$Photo_first, table$plot , se)
length(sd)
data.frame(Photo_first,sd)
names(AllValue)
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table$plot , se)
Cond_first = tapply(table$Cond_first, table$plot , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table$plot , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table$plot , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table$plot , se)
Photo_last = tapply(table$Photo_last, table$plot , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table$plot , se)
Cond_last = tapply(table$Cond_last, table$plot , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table$plot , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table$plot , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table$plot , se)
data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
View(out)
real = PGMean.GXvalue(AllValue)
real = PGMean.GXvalue(AllValue,"plot")
View(real)
real = sort(real)
real = sort(real,name)
real = sort(real,real$name)
real = real[order(real$name),]
rownames(out)
out$names = rownames(out)
View(AllValue)
table(plot_name)
table(AllValue$plot_name)
length(table(AllValue$plot_name))
out$name = rownames(out)
out$rep_number = table(AllValue$plot_name)
out = out[, colSums(is.na(out)) != nrow(out)]
out$rep_number = table(AllValue$plot_name)
out = out[, colSums(is.na(out)) != nrow(out)]
names(out)
Photo_first = tapply(table$Photo_first, table$plot , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table$plot , se)
Cond_first = tapply(table$Cond_first, table$plot , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table$plot , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table$plot , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table$plot , se)
Photo_last = tapply(table$Photo_last, table$plot , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table$plot , se)
Cond_last = tapply(table$Cond_last, table$plot , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table$plot , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table$plot , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table$plot , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue$plot_name)
out = out[, colSums(is.na(out)) != nrow(out)]
names(out)
out = out[,c(13,14,1:12)]
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
Photo_first
table(AllValue[,col])
type = "genotype"
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
PGMean.GXvalue = function(table, type){
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
#define function to calculate standard error
se = function(x){
return(sd(x)/sqrt(length(x)))
}
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
# assign class and attributes
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
PGMean(AllValue, "plot")
PGMean = function(table,...){
UseMethod("PGMean",table)
}
PGMean(AllValue, "plot")
library(IGEA)
library(IGEA)
class(AllCurve)
head(AllCurve)
head(leak1_718)
head(AllValue)
filename = "cm_07-21-2017_ril_leak1_.csv"
genolist = "genotypic_imformation.csv"
table = read.csv(filename,header = FALSE,stringsAsFactors = FALSE,na.strings = c("","NA"))
setwd("~/GitHub/Instant-Gas-Exchange-Measurements/inst/extdata")
table = read.csv(filename,header = FALSE,stringsAsFactors = FALSE,na.strings = c("","NA"))
#check input
if(!is.data.frame(table)) stop("Data frame needed.")
if(!is.numeric(leaf_rep)) stop("leaf replication number must be numeric\nstart from 1")
#record measurement properties
measurement.time = table[2,1]
machine = table[which(table$V1=="Unit="),2]
lightsource = table[which(table$V1=="LightSource="),2]
AD.avgtime = table[which(table$V1=="A/D AvgTime="),2]
flow = table[grep("Flow: Fixed ",table[,2]),2]
flow = unique(gsub("(\\d{2}:\\d{2}:\\d{2})","",flow))
flow = gsub("\"\n" ,"",flow)
flow = gsub("\" ","",flow)
par = table[grep("Lamp: ParIn",table[,2]),2]
par = unique(gsub("(\\d{2}:\\d{2}:\\d{2})","",par))
par = gsub("\"\n" ,"",par)
par = gsub("\" ","",par)
CO2 = table[grep("CO2 Mixer",table[,2]),2]
CO2 = unique(gsub("(\\d{2}:\\d{2}:\\d{2})","",CO2))
CO2 = gsub("\"\n" ,"",CO2)
CO2 = gsub("\" ","",CO2)
Tblock = table[grep("Coolers: Tblock",table[,2]),2]
Tblock = unique(gsub("(\\d{2}:\\d{2}:\\d{2})","",Tblock))
Tblock = gsub("\"\n" ,"",Tblock)
Tblock = gsub("\" ","",Tblock)
if (condition == TRUE){
if(length(flow) > 1 | length(par) > 1 | length(CO2) > 1 | length(Tblock) > 1) {
warning("Multiple measuring conditions. Check data collection conditions.")
print(c(flow,par,CO2,Tblock))
}
if(length(flow) == 0 | length(par) == 0 | length(CO2) == 0 | length(Tblock) == 0){
warning("Missing measuring conditions. Check data collection conditions.")
print(c(flow,par,CO2,Tblock))
}
}
#trim uneccessary parameters
colname = table[which(table$V1 == "Obs"),]
colnames(table) = colname
table = table[-c(1:(which(table[,1] == "Obs")+1)),c("Obs","HHMMSS","FTime","Photo","Cond","Ci/Ca")]
rownames(table)=1:nrow(table)
#eliminate remarks other than records
record = grep("(\\d{2}:\\d{2}:\\d{2})[[:space:]][[:digit:]]+",table$HHMMSS)
remark = which(table$Obs == "Remark=")
remove = remark[!remark %in% record]
table = table[-remove,]
rownames(table)=1:nrow(table)
#give name to measurement points
table$HHMMSS = gsub("(\\d{2}:\\d{2}:\\d{2})","",table$HHMMSS)
table$HHMMSS = gsub("\"","",table$HHMMSS)
table$HHMMSS = gsub("\n","",table$HHMMSS)
table$HHMMSS = gsub(" ","",table$HHMMSS)
table$HHMMSS = gsub("[[:alpha:]]","",table$HHMMSS)
table$HHMMSS[table$HHMMSS==""] <- "000"
# give records same length of 3 digits
digit3 = unique(table$HHMMSS)[grep("^[[:digit:]]{3}$",unique(table$HHMMSS))]
other = unique(table$HHMMSS)[!unique(table$HHMMSS) %in% digit3]
if(length(other)>1) {
cat("check out these names, are they 3 digits? \n",other)
cat("\nReformatting them into 3 digits...")
Sys.sleep(2) # just makes me feel like this functino is useful and is actually taking some time to fix this digit number problem.
table[grep("^[[:digit:]]{2}$",table$HHMMSS),"HHMMSS"] = paste("0",table[grep("^[[:digit:]]{2}$",table$HHMMSS),"HHMMSS"],sep="")
table[grep("^[[:digit:]]{1}$",table$HHMMSS),"HHMMSS"] = paste("00",table[grep("^[[:digit:]]{1}$",table$HHMMSS),"HHMMSS"],sep="")
cat("Done.")
}
table$name = table$HHMMSS
table$plot = table$HHMMSS
table$leaf = table$HHMMSS
table$leaf = leaf_rep
nameslist = which(!(table$HHMMSS=="000"))
for (row in 1:length(table$Obs)){
if (table[row,"plot"]=="000"){
firstline = which.max (  which(nameslist < row)  )
table[row,"plot"] = table[nameslist[firstline],"plot"]
table[row,"name"] = paste(table[nameslist[firstline],"plot"],"_",table[nameslist[firstline],"leaf"],sep="")
}
}
remark = which(table$Obs == "Remark=")
table = table[-remark,]
table = table[,-c(1,2)]
rownames(table)=1:nrow(table)
col.numeric = c(1,2,3,4)
table[,col.numeric] = apply(table[,col.numeric],2,function(x) as.numeric(x))
table = table[c(6,7,5,1,2,3,4)]
table$tag = filename
View(table)
names(table$`Ci/Ca`)
names(table) = c(names(table)[1:6],"Ci.Ca")
table$tag = filename
names(AllCurve)
names(AllCurve) = c(names(AllCurve)[1:6],"Ci.Ca",names(AllCurve)[8:12])
names(AllCurve)
save(AllCurve,file = "AllCurve.RData")
installed.packages("qtl")
install.packages("qtl")
library(IGEA)
?read.GX
readGX(filename,1,genolist)
read.GX(filename,1,genolist)
test = read.GX(filename,1,genolist)
summary(test)
aa = GetValue(test)
aa = GetValue.GXcurve(test)
summary(aa)
summary(aa,"Photo")
summary(aa,"Photo_first")
?PGMean
bb = PGMean(aa,"plot")
bb = PGMean.GXvalue(aa,"plot")
PGMean.GXvalue = function(table, type){
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
#define function to calculate standard error
se = function(x){
return(sd(x)/sqrt(length(x)))
}
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
#get rid of NA columns (if in the last GetValue function, only one of
#first or last minute values was chosen)
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
# assign class and attributes
class(out) = c("GXmean",class(out))
attr(out, "type") = type
return(out)
}
bb = PGMean.GXvalue(aa,"plot")
bb = PGMean.GXvalue(aa,"plot")
table = aa
type = "plot"
# find corresponding column
if(type == "plot"){
col = "plot_name"
}
if(type == "genotype"){
col = type
}
if(! type %in% c("plot","genotype")){
stop("Wrong type input. plot/genotype")
}
#define function to calculate standard error
se = function(x){
return(sd(x)/sqrt(length(x)))
}
#use tapply to calculate mean and standard error
Photo_first = tapply(table$Photo_first, table[,col] , mean, na.rm = TRUE)
sd1 = tapply(table$Photo_first, table[,col] , se)
Cond_first = tapply(table$Cond_first, table[,col] , mean, na.rm = TRUE)
sd2 = tapply(table$Cond_first, table[,col] , se)
Ci.Ca_first = tapply(table$Ci.Ca_first, table[,col] , mean, na.rm = TRUE)
sd3 = tapply(table$Ci.Ca_first, table[,col] , se)
Photo_last = tapply(table$Photo_last, table[,col] , mean, na.rm = TRUE)
sd4 = tapply(table$Photo_last, table[,col] , se)
Cond_last = tapply(table$Cond_last, table[,col] , mean, na.rm = TRUE)
sd5 = tapply(table$Cond_last, table[,col] , se)
Ci.Ca_last = tapply(table$Ci.Ca_last, table[,col] , mean, na.rm = TRUE)
sd6 = tapply(table$Ci.Ca_last, table[,col] , se)
out = data.frame(Photo_first,sd1,Cond_first,sd2,Ci.Ca_first,sd3,Photo_last,sd4,
Cond_last,sd5,Ci.Ca_last,sd6)
out$name = rownames(out)
out$rep_number = table(AllValue[,col])
out$rep_number = table(table[,col])
#get rid of NA columns (if in the last GetValue function, only one of
#first or last minute values was chosen)
out = out[, colSums(is.na(out)) != nrow(out)]
out = out[,c(13,14,1:12)]
rownames(out) = 1:length(out$name)
out = out[,c(13,14,1:12)]
View(out)
